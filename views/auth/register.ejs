<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <h2 class="text-center mb-4">
                        <i class="fas fa-user-plus me-2"></i>Criar Conta
                    </h2>
                    
                    <% if (locals.error && error.length > 0) { %>
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <%= error %>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    <% } %>

                    <form action="/auth/register" method="POST" id="registerForm" class="needs-validation" novalidate>
                        <!-- Dados Pessoais -->
                        <div class="mb-4">
                            <h4 class="mb-3 section-title">
                                <i class="fas fa-user me-2"></i>Dados Pessoais
                            </h4>
                            
                            <div class="mb-3">
                                <label for="name" class="form-label">Nome Completo</label>
                                <input type="text" class="form-control" id="name" name="name" required
                                    minlength="3" maxlength="100" value="<%= locals.name || '' %>">
                            </div>

                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" name="email" required
                                    value="<%= locals.email || '' %>">
                            </div>

                            <div class="mb-3">
                                <label for="cpf" class="form-label">CPF</label>
                                <input type="text" class="form-control" id="cpf" name="cpf" required
                                    placeholder="000.000.000-00" value="<%= locals.cpf || '' %>">
                            </div>

                            <div class="mb-3">
                                <label for="phone" class="form-label">Telefone</label>
                                <input type="text" class="form-control" id="phone" name="phone" required
                                    placeholder="(00) 00000-0000" value="<%= locals.phone || '' %>">
                            </div>

                            <div class="mb-3">
                                <label for="password" class="form-label">Senha</label>
                                <input type="password" class="form-control" id="password" name="password" required
                                    minlength="6" maxlength="50">
                                <div class="form-text">A senha deve ter pelo menos 6 caracteres.</div>
                            </div>

                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">Confirmar Senha</label>
                                <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required
                                    minlength="6" maxlength="50">
                                <div id="passwordMatch" class="form-text"></div>
                            </div>
                        </div>

                        <!-- Endereço -->
                        <div class="mb-4">
                            <h4 class="mb-3 section-title">
                                <i class="fas fa-map-marker-alt me-2"></i>Endereço
                            </h4>

                            <div class="mb-3">
                                <label for="country" class="form-label">País</label>
                                <input type="text" class="form-control" id="country" name="country" required
                                    value="BR" readonly>
                            </div>

                            <div class="mb-3">
                                <label for="zip_code" class="form-label">CEP</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="zip_code" name="zip_code" required
                                        placeholder="00000-000" value="<%= locals.zip_code || '' %>">
                                    <button class="btn btn-outline-secondary" type="button" id="searchCep">
                                        <i class="bi bi-search"></i> Buscar
                                    </button>
                                </div>
                                <div class="form-text">
                                    <a href="https://buscacepinter.correios.com.br/app/localidade_logradouro/index.php" 
                                       target="_blank" class="text-decoration-none">
                                        <i class="fas fa-question-circle me-1"></i>Não lembra seu CEP? Clique aqui
                                    </a>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="street" class="form-label">Logradouro</label>
                                <input type="text" class="form-control" id="street" name="street" required
                                    value="<%= locals.street || '' %>">
                            </div>

                            <div class="row">
                                <div class="col-md-4 mb-3">
                                    <label for="number" class="form-label">Número</label>
                                    <input type="text" class="form-control" id="number" name="number" required
                                        placeholder="Nº" value="<%= locals.number || '' %>">
                                    <div class="form-text">
                                        <i class="fas fa-info-circle me-1"></i>Digite 0 para S/N
                                    </div>
                                </div>

                                <div class="col-md-8 mb-3">
                                    <label for="complement" class="form-label">Complemento</label>
                                    <input type="text" class="form-control" id="complement" name="complement"
                                        placeholder="Apto" value="<%= locals.complement || '' %>">
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="neighborhood" class="form-label">Bairro</label>
                                <input type="text" class="form-control" id="neighborhood" name="neighborhood" required
                                    value="<%= locals.neighborhood || '' %>">
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="city" class="form-label">Cidade</label>
                                    <input type="text" class="form-control" id="city" name="city" required
                                        value="<%= locals.city || '' %>">
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="state" class="form-label">Estado</label>
                                    <select class="form-select" id="state" name="state" required>
                                        <option value="">Selecione...</option>
                                        <option value="AC" <%= locals.state === 'AC' ? 'selected' : '' %>>Acre</option>
                                        <option value="AL" <%= locals.state === 'AL' ? 'selected' : '' %>>Alagoas</option>
                                        <option value="AP" <%= locals.state === 'AP' ? 'selected' : '' %>>Amapá</option>
                                        <option value="AM" <%= locals.state === 'AM' ? 'selected' : '' %>>Amazonas</option>
                                        <option value="BA" <%= locals.state === 'BA' ? 'selected' : '' %>>Bahia</option>
                                        <option value="CE" <%= locals.state === 'CE' ? 'selected' : '' %>>Ceará</option>
                                        <option value="DF" <%= locals.state === 'DF' ? 'selected' : '' %>>Distrito Federal</option>
                                        <option value="ES" <%= locals.state === 'ES' ? 'selected' : '' %>>Espírito Santo</option>
                                        <option value="GO" <%= locals.state === 'GO' ? 'selected' : '' %>>Goiás</option>
                                        <option value="MA" <%= locals.state === 'MA' ? 'selected' : '' %>>Maranhão</option>
                                        <option value="MT" <%= locals.state === 'MT' ? 'selected' : '' %>>Mato Grosso</option>
                                        <option value="MS" <%= locals.state === 'MS' ? 'selected' : '' %>>Mato Grosso do Sul</option>
                                        <option value="MG" <%= locals.state === 'MG' ? 'selected' : '' %>>Minas Gerais</option>
                                        <option value="PA" <%= locals.state === 'PA' ? 'selected' : '' %>>Pará</option>
                                        <option value="PB" <%= locals.state === 'PB' ? 'selected' : '' %>>Paraíba</option>
                                        <option value="PR" <%= locals.state === 'PR' ? 'selected' : '' %>>Paraná</option>
                                        <option value="PE" <%= locals.state === 'PE' ? 'selected' : '' %>>Pernambuco</option>
                                        <option value="PI" <%= locals.state === 'PI' ? 'selected' : '' %>>Piauí</option>
                                        <option value="RJ" <%= locals.state === 'RJ' ? 'selected' : '' %>>Rio de Janeiro</option>
                                        <option value="RN" <%= locals.state === 'RN' ? 'selected' : '' %>>Rio Grande do Norte</option>
                                        <option value="RS" <%= locals.state === 'RS' ? 'selected' : '' %>>Rio Grande do Sul</option>
                                        <option value="RO" <%= locals.state === 'RO' ? 'selected' : '' %>>Rondônia</option>
                                        <option value="RR" <%= locals.state === 'RR' ? 'selected' : '' %>>Roraima</option>
                                        <option value="SC" <%= locals.state === 'SC' ? 'selected' : '' %>>Santa Catarina</option>
                                        <option value="SP" <%= locals.state === 'SP' ? 'selected' : '' %>>São Paulo</option>
                                        <option value="SE" <%= locals.state === 'SE' ? 'selected' : '' %>>Sergipe</option>
                                        <option value="TO" <%= locals.state === 'TO' ? 'selected' : '' %>>Tocantins</option>
                                    </select>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="address_name" class="form-label">Nome do Endereço</label>
                                <input type="text" class="form-control" id="address_name" name="address_name" required
                                    placeholder="Ex: Casa, Trabalho, etc." value="<%= locals.address_name || '' %>">
                            </div>
                        </div>

                        <div class="mb-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="terms" name="terms" required>
                                <label class="form-check-label" for="terms">
                                    Li e aceito os <a href="/termos" target="_blank">Termos de Uso</a> e a 
                                    <a href="/privacidade" target="_blank">Política de Privacidade</a>
                                </label>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-user-plus me-2"></i>Criar Conta
                            </button>
                        </div>
                    </form>

                    <div class="text-center mt-4">
                        <p class="mb-0">Já tem uma conta? <a href="/auth/login">Faça login</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border: none;
        border-radius: 15px;
    }
    
    .form-control {
        border-radius: 10px;
        padding: 12px;
    }
    
    .form-control:focus {
        box-shadow: 0 0 0 0.2rem rgba(255, 105, 180, 0.25);
        border-color: #ff69b4;
    }
    
    .btn-primary {
        background-color: #ff69b4;
        border-color: #ff69b4;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        background-color: #ff4da6;
        border-color: #ff4da6;
        transform: translateY(-1px);
    }

    .section-title {
        color: #ff69b4;
        font-weight: 600;
        padding-bottom: 10px;
        border-bottom: 2px solid #ffb6c1;
        margin-bottom: 20px;
    }

    .form-text {
        font-size: 0.85rem;
        color: #6c757d;
        margin-top: 5px;
    }

    .form-text a {
        color: #ff69b4;
    }

    .form-text a:hover {
        color: #ff4da6;
        text-decoration: underline !important;
    }

    .alert {
        border-radius: 10px;
        border: none;
        background-color: #fff5f7;
        color: #dc3545;
        border-left: 4px solid #dc3545;
    }

    .btn-outline-secondary {
        border-color: #ff69b4;
        color: #ff69b4;
    }

    .btn-outline-secondary:hover {
        background-color: #ff69b4;
        border-color: #ff69b4;
        color: white;
    }
</style>

<script>
    // Função para inicializar as máscaras
    function initializeMasks() {
        console.log('Inicializando máscaras...');
        
        try {
            // Máscaras usando IMask
            const cpfInput = document.getElementById('cpf');
            const phoneInput = document.getElementById('phone');
            const zipCodeInput = document.getElementById('zip_code');

            if (!cpfInput || !phoneInput || !zipCodeInput) {
                console.error('Elementos de input não encontrados:', {
                    cpf: !!cpfInput,
                    phone: !!phoneInput,
                    zipCode: !!zipCodeInput
                });
                return;
            }

            // Aplicar máscaras
            const masks = {
                cpf: IMask(cpfInput, {
                    mask: '000.000.000-00'
                }),
                phone: IMask(phoneInput, {
                    mask: '(00) 00000-0000'
                }),
                zipCode: IMask(zipCodeInput, {
                    mask: '00000-000'
                })
            };

            console.log('Máscaras aplicadas:', Object.keys(masks));

            // Validação de senha em tempo real
            const password = document.getElementById('password');
            const confirmPassword = document.getElementById('confirmPassword');
            const passwordMatch = document.getElementById('passwordMatch');

            if (password && confirmPassword && passwordMatch) {
                confirmPassword.addEventListener('input', function() {
                    if (password.value === this.value) {
                        passwordMatch.className = 'form-text text-success';
                        passwordMatch.textContent = 'As senhas coincidem';
                    } else {
                        passwordMatch.className = 'form-text text-danger';
                        passwordMatch.textContent = 'As senhas não coincidem';
                    }
                });
                console.log('Validação de senha configurada');
            }

            // Busca de CEP
            const searchCepButton = document.getElementById('searchCep');
            
            if (searchCepButton) {
                searchCepButton.addEventListener('click', function() {
                    console.log('Botão de busca CEP clicado');
                    const cep = zipCodeInput.value.replace(/\D/g, '');
                    
                    if (cep.length !== 8) {
                        alert('CEP inválido');
                        return;
                    }

                    this.disabled = true;
                    this.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Buscando...';

                    fetch(`https://viacep.com.br/ws/${cep}/json/`)
                        .then(response => {
                            console.log('Resposta da API:', response.status);
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log('Dados recebidos:', data);
                            if (data.erro) {
                                throw new Error('CEP não encontrado');
                            }

                            const fields = {
                                street: document.getElementById('street'),
                                neighborhood: document.getElementById('neighborhood'),
                                city: document.getElementById('city'),
                                state: document.getElementById('state')
                            };

                            if (fields.street) fields.street.value = data.logradouro || '';
                            if (fields.neighborhood) fields.neighborhood.value = data.bairro || '';
                            if (fields.city) fields.city.value = data.localidade || '';
                            if (fields.state) fields.state.value = data.uf || '';

                            const numberField = document.getElementById('number');
                            if (numberField) numberField.focus();
                        })
                        .catch(error => {
                            console.error('Erro na busca do CEP:', error);
                            alert(error.message || 'Erro ao buscar CEP');
                        })
                        .finally(() => {
                            this.disabled = false;
                            this.innerHTML = '<i class="bi bi-search"></i> Buscar';
                        });
                });
                console.log('Busca de CEP configurada');
            }

            // Validação do formulário
            const form = document.getElementById('registerForm');
            if (form) {
                let isSubmitting = false;
                form.addEventListener('submit', async function(event) {
                    event.preventDefault();
                    
                    if (isSubmitting) return;

                    if (!form.checkValidity()) {
                        event.stopPropagation();
                        form.classList.add('was-validated');
                        return;
                    }

                    isSubmitting = true;
                    const submitButton = form.querySelector('button[type="submit"]');
                    if (submitButton) submitButton.disabled = true;

                    try {
                        const formData = new FormData(form);
                        const object = {};
                        formData.forEach((value, key) => object[key] = value);
                        const json = JSON.stringify(object);

                        const response = await fetch(form.action, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: json
                        });

                        const data = await response.json();

                        if (!response.ok) {
                            throw new Error(data.message || 'Erro ao realizar cadastro');
                        }

                        // Se chegou aqui, o cadastro foi bem sucedido
                        window.location.href = '/auth/login';
                    } catch (error) {
                        // Criar ou atualizar o alerta de erro
                        let alertDiv = document.querySelector('.alert');
                        if (!alertDiv) {
                            alertDiv = document.createElement('div');
                            alertDiv.className = 'alert alert-danger alert-dismissible fade show';
                            alertDiv.setAttribute('role', 'alert');
                            form.insertBefore(alertDiv, form.firstChild);
                        }

                        alertDiv.innerHTML = `
                            ${error.message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        `;
                    } finally {
                        isSubmitting = false;
                        if (submitButton) submitButton.disabled = false;
                    }
                });
                console.log('Validação do formulário configurada');
            }

        } catch (error) {
            console.error('Erro ao inicializar as máscaras:', error);
        }
    }

    // Aguarda o DOM estar completamente carregado
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeMasks);
    } else {
        initializeMasks();
    }

    // Backup: tenta inicializar novamente quando a página estiver totalmente carregada
    window.addEventListener('load', function() {
        console.log('Página totalmente carregada, verificando máscaras...');
        if (typeof IMask === 'undefined') {
            console.error('IMask ainda não está disponível!');
        } else {
            initializeMasks();
        }
    });
</script>

